name: Networking Stack & Approval

on:
  push:
    branches:
      - feat/networking-flow
      - master
    paths-ignore:
      - 'charts/**'

  pull_request:
    branches:
      - master
    paths-ignore:
      - 'charts/**'

permissions:
  id-token: write
  contents: write

jobs:
  # detect-networking-changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     requires_approval: ${{ steps.detect.outputs.requires_approval }}
  #     diff_content: ${{ steps.detect.outputs.diff_content }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Debug Environment Variables
  #       run: |
  #         if [[ "${{ github.event_name }}" == "push" ]]; then
  #           ENVIRONMENT="${{ github.ref_name }}"
  #         else
  #           ENVIRONMENT="${{ github.event.pull_request.base.ref }}"
  #         fi

  #         echo "Deployment Environment: $ENVIRONMENT"
  #         echo "ENV_PREFIX: $ENVIRONMENT"

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '20'

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Install AWS CDK
  #       run: npm install -g aws-cdk

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: cdk diff networking
  #       id: detect
  #       run: |
  #         echo "Running CDK Diff for NetworkStack..."
  #         DIFF_OUTPUT=$(cdk diff NetworkStack --verbose || true)
  #         echo "$DIFF_OUTPUT"

  #         echo "diff_content<<EOF" >> "$GITHUB_OUTPUT"
  #         echo "$DIFF_OUTPUT" >> "$GITHUB_OUTPUT"
  #         echo "EOF" >> "$GITHUB_OUTPUT"

  #         if [[ -z "$DIFF_OUTPUT" || "$DIFF_OUTPUT" == *"There were no differences"* ]]; then
  #           echo "No changes detected in NetworkingStack"
  #           echo "requires_approval=false" >> "$GITHUB_OUTPUT"
  #         else
  #           echo "Changes detected in NetworkingStack"
  #           echo "requires_approval=true" >> "$GITHUB_OUTPUT"
  #         fi


  detect-networking-changes:
    runs-on: ubuntu-latest
    outputs:
      requires_approval: ${{ steps.detect.outputs.requires_approval }}
      diff_content: ${{ steps.detect.outputs.diff_content }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Install dependencies
        run: npm ci

      - name: Run CDK Diff and capture output
        id: detect
        shell: bash
        run: |
          set -eo pipefail

          echo "Running CDK Diff for NetworkStack..."
          DIFF_OUTPUT=$(cdk diff NetworkStack || true)

          echo "Saving diff output to job output..."

          # Save multiline output safely
          {
            echo 'diff_content<<EOF'
            echo "$DIFF_OUTPUT"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

          # Determine if there were changes
          if [[ -z "$DIFF_OUTPUT" || "$DIFF_OUTPUT" == *"There were no differences"* ]]; then
            echo "requires_approval=false" >> "$GITHUB_OUTPUT"
          else
            echo "requires_approval=true" >> "$GITHUB_OUTPUT"
          fi

  output-network-changes:
    needs: detect-networking-changes
    if: needs.detect-networking-changes.outputs.requires_approval == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Format and print CDK diff as Markdown table
        shell: bash
        run: |

          echo "Step 1"

          # RAW_DIFF="${{ needs.detect-networking-changes.outputs.diff_content }}"

          # echo "[DEBUG] Raw diff content:"
          echo "${{ needs.detect-networking-changes.outputs.diff_content }}" > raw_diff.txt
          cat raw_diff.txt

          echo "Step 2 - Generating summary table"
          echo "## CDK Networking Resource Changes Table" >> "$GITHUB_STEP_SUMMARY"
          echo "| Action | Resource Type | Logical ID |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|---------------|------------|" >> "$GITHUB_STEP_SUMMARY"

          echo "$RAW_DIFF" | grep -E '^\[\+|\[-|\[~' | while read -r line; do
            ACTION=$(echo "$line" | cut -c2)
            DETAILS=$(echo "$line" | cut -c5-)
            RESOURCE_TYPE=$(echo "$DETAILS" | awk '{print $1}')
            LOGICAL_ID=$(echo "$DETAILS" | awk '{print $2}')
            echo "| $ACTION | $RESOURCE_TYPE | $LOGICAL_ID |" >> "$GITHUB_STEP_SUMMARY"
          done




  # output-network-changes:
  #   needs: detect-networking-changes
  #   if: needs.detect-networking-changes.outputs.requires_approval == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Extract and format CDK diff
  #       shell: bash
  #       run: |
  #         echo "## CDK Networking Resource Changes Table" >> "$GITHUB_STEP_SUMMARY"
  #         echo "" >> "$GITHUB_STEP_SUMMARY"
  #         echo "| Action | Resource Type | Logical ID |" >> "$GITHUB_STEP_SUMMARY"
  #         echo "|--------|---------------|------------|" >> "$GITHUB_STEP_SUMMARY"

  #         DIFF_CONTENT="${{ needs.detect-networking-changes.outputs.diff_content }}"

  #         # Extract only well-formed CDK resource change lines
  #         RESOURCE_LINES=$(echo "$DIFF_CONTENT" | awk '/^Resources$/,/^$/' | grep -E '^\[[+\-~]\] AWS::[A-Za-z0-9:]+ ')

  #         COUNT=0

  #         while IFS= read -r line; do
  #           # Must have at least 3 tokens: [~] AWS::X::Y LogicalID
  #           TOKENS=$(echo "$line" | awk '{print NF}')
  #           if [[ $TOKENS -lt 3 ]]; then
  #             continue  # skip malformed or nested lines
  #           fi

  #           ACTION_CHAR=$(echo "$line" | cut -c2)
  #           case "$ACTION_CHAR" in
  #             "+") ACTION="Add" ;;
  #             "-") ACTION="Destroy" ;;
  #             "~") ACTION="Modify" ;;
  #             *) ACTION="Unknown" ;;
  #           esac

  #           RESOURCE_TYPE=$(echo "$line" | awk '{print $2}')
  #           LOGICAL_ID=$(echo "$line" | cut -d' ' -f3- | sed 's/ destroy$//')

  #           echo "| $ACTION | $RESOURCE_TYPE | $LOGICAL_ID |" >> "$GITHUB_STEP_SUMMARY"
  #           COUNT=$((COUNT + 1))
  #         done <<< "$RESOURCE_LINES"

  #         echo "" >> "$GITHUB_STEP_SUMMARY"
  #         echo "**Total Resource Changes: $COUNT**" >> "$GITHUB_STEP_SUMMARY"





      # - name: cdk diff networking
      #   id: detect
      #   run: |
      #     DIFF_OUTPUT=$(cdk diff NetworkStack || true)
      #     echo "$DIFF_OUTPUT"
          
      #     if [[ -z "$DIFF_OUTPUT" || "$DIFF_OUTPUT" == *"There were no differences"* ]]; then
      #       echo "No changes detected in NetworkingStack"
      #       echo "requires_approval=false" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "Changes detected in NetworkingStack"
      #       echo "requires_approval=true" >> "$GITHUB_OUTPUT"
      #     fi

  # request-approval:
  #   needs: detect-networking-changes
  #   if: needs.detect-networking-changes.outputs.requires_approval == 'true'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     issues: write
  #   outputs:
  #     deployment_approved: ${{ steps.set_approval.outputs.deployment_approved }}
  #   steps:
  #     - name: Manual Workflow Approval
  #       id: approval
  #       uses: trstringer/manual-approval@v1.9.1
  #       with:
  #         secret: ${{ secrets.GITHUB_TOKEN }}
  #         approvers: Ram1814
  #         minimum-approvals: 1
  #         issue-title: "Approve Networking Changes"
  #         issue-body: "Please approve or deny the deployment of networking changes."

  #     - name: Check Approval Status
  #       id: set_approval
  #       run: |
  #         if [[ "${{ steps.approval.outcome }}" == "success" ]]; then
  #           echo "Manual approval succeeded"
  #           echo "deployment_approved=true" >> "$GITHUB_OUTPUT"
  #         else
  #           echo "Manual approval failed"
  #           echo "deployment_approved=false" >> "$GITHUB_OUTPUT"
  #         fi

  # status-check:
  #   needs: 
  #     - detect-networking-changes
  #     - request-approval
  #   if: always()
  #   runs-on: ubuntu-latest
  #   outputs:
  #     proceed_with_deployment: ${{ steps.decision.outputs.proceed_with_deployment }}
  #   steps:
  #     - name: Determine network check result
  #       id: decision
  #       run: |
  #         requires_approval="${{ needs.detect-networking-changes.outputs.requires_approval }}"
  #         deployment_approved="${{ needs.request-approval.outputs.deployment_approved }}"

  #         echo "requires_approval: $requires_approval"
  #         echo "deployment_approved: $deployment_approved"

  #         if [[ "$requires_approval" == "false" ]]; then
  #           echo "No approval needed, proceeding with deployment."
  #           echo "proceed_with_deployment=true" >> "$GITHUB_OUTPUT"
  #           exit 0
  #         fi

  #         if [[ "$requires_approval" == "true" && "$deployment_approved" == "true" ]]; then
  #           echo "Approval granted, proceeding with deployment."
  #           echo "proceed_with_deployment=true" >> "$GITHUB_OUTPUT"
  #           exit 0
  #         fi

  #         echo "Approval denied or pending! Skipping deployment."
  #         echo "proceed_with_deployment=false" >> "$GITHUB_OUTPUT"
  #         exit 1

  # deploy-service:
  #   needs: status-check
  #   if: always()
  #   uses: ./.github/workflows/service-deploy.yml
  #   with:
  #     environment: ${{ github.ref_name }}
  #     proceed_with_deployment: ${{ needs.status-check.outputs.proceed_with_deployment }}
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
