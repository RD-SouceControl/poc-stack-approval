name: Networking Stack & Approval

on:
  push:
    branches:
      - feat/networking-flow
      - feature/formate
    paths-ignore:
      - 'charts/**'

  pull_request:
    branches:
      - master
    paths-ignore:
      - 'charts/**'

permissions:
  id-token: write
  contents: write

jobs:
  detect-networking-changes:
    runs-on: ubuntu-latest
    outputs:
      requires_approval: ${{ steps.detect.outputs.requires_approval }}
      diff_content: ${{ steps.detect.outputs.diff_content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Install dependencies
        run: npm ci

      - name: cdk diff networking
        id: detect
        run: |
          echo "Running CDK Diff for NetworkStack..."
          DIFF_OUTPUT=$(cdk diff NetworkStack || true)
          echo "$DIFF_OUTPUT"

          printf "diff_content<<EOF\n%s\nEOF\n" "$DIFF_OUTPUT" >> "$GITHUB_OUTPUT"

          if [[ -z "$DIFF_OUTPUT" || "$DIFF_OUTPUT" == *"There were no differences"* ]]; then
            echo "No changes detected in NetworkingStack"
            echo "requires_approval=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected in NetworkingStack"
            echo "requires_approval=true" >> "$GITHUB_OUTPUT"
          fi

          echo "## CDK Networking Stack Changes" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Action | Resource Type | Logical ID |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|---------------|------------|" >> "$GITHUB_STEP_SUMMARY"

          # Filter only direct resource-level changes (ignore nested like └─ or │)
          RESOURCE_LINES=$(echo "$DIFF_OUTPUT" | grep -E '^\[\+|\[-|\[~\]' | grep -vE '└|│')

          COUNT=0

          while IFS= read -r line; do
            ACTION_CHAR=$(echo "$line" | cut -c2)
            case "$ACTION_CHAR" in
              "+") ACTION="Add" ;;
              "-") ACTION="Destroy" ;;
              "~") ACTION="Modify" ;;
              *) ACTION="Unknown" ;;
            esac

            RESOURCE_TYPE=$(echo "$line" | awk '{print $2}')
            LOGICAL_ID=$(echo "$line" | cut -d' ' -f3-)

            echo "| $ACTION | $RESOURCE_TYPE | $LOGICAL_ID |" >> "$GITHUB_STEP_SUMMARY"
            COUNT=$((COUNT + 1))
          done <<< "$RESOURCE_LINES"

          # echo "" >> "$GITHUB_STEP_SUMMARY"
          # echo "**Total Resource Changes: $COUNT**" >> "$GITHUB_STEP_SUMMARY"

      - name: Run CDK Synth
        run: |
          cdk synth NetworkStack --quite > template.yaml

      - name: Generate Networking Table
        run: |
          pip install pyyaml
          python .github/workflows/scripts/extract_networking.py

      - name: Upload Markdown Table Artifact
        uses: actions/upload-artifact@v4
        with:
          name: networking-summary
          path: networking_table.md
  
      - name: Append Networking Table to Job Summary
        run: |
          echo "### Detailed Networking Resource Table" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          cat networking_table.md >> "$GITHUB_STEP_SUMMARY"


  # output-network-changes:
  #   needs: detect-networking-changes
  #   if: needs.detect-networking-changes.outputs.requires_approval == 'true'
  #   env:
  #     DIFF_OUTPUT: ${{ needs.detect-networking-changes.outputs.diff_content }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Format and print CDK diff as Markdown table
  #       shell: bash
  #       run: |
  #         echo "Step 1: Raw Diff Output"
  #         echo "$DIFF_OUTPUT"

  #         echo "## CDK Networking Stack Changes" >> "$GITHUB_STEP_SUMMARY"
  #         echo "" >> "$GITHUB_STEP_SUMMARY"
  #         echo "| Action | Resource Type | Logical ID |" >> "$GITHUB_STEP_SUMMARY"
  #         echo "|--------|---------------|------------|" >> "$GITHUB_STEP_SUMMARY"

  #         # Filter only direct resource-level changes (ignore nested like └─ or │)
  #         RESOURCE_LINES=$(echo "$DIFF_OUTPUT" | grep -E '^\[\+|\[-|\[~\]' | grep -vE '└|│')

  #         COUNT=0

  #         while IFS= read -r line; do
  #           ACTION_CHAR=$(echo "$line" | cut -c2)
  #           case "$ACTION_CHAR" in
  #             "+") ACTION="Add" ;;
  #             "-") ACTION="Destroy" ;;
  #             "~") ACTION="Modify" ;;
  #             *) ACTION="Unknown" ;;
  #           esac

  #           RESOURCE_TYPE=$(echo "$line" | awk '{print $2}')
  #           LOGICAL_ID=$(echo "$line" | cut -d' ' -f3-)

  #           echo "| $ACTION | $RESOURCE_TYPE | $LOGICAL_ID |" >> "$GITHUB_STEP_SUMMARY"
  #           COUNT=$((COUNT + 1))
  #         done <<< "$RESOURCE_LINES"

  #         echo "" >> "$GITHUB_STEP_SUMMARY"
  #         echo "**Total Resource Changes: $COUNT**" >> "$GITHUB_STEP_SUMMARY"

      # - name: cdk diff networking
      #   id: detect
      #   run: |
      #     DIFF_OUTPUT=$(cdk diff NetworkStack || true)
      #     echo "$DIFF_OUTPUT"
          
      #     if [[ -z "$DIFF_OUTPUT" || "$DIFF_OUTPUT" == *"There were no differences"* ]]; then
      #       echo "No changes detected in NetworkingStack"
      #       echo "requires_approval=false" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "Changes detected in NetworkingStack"
      #       echo "requires_approval=true" >> "$GITHUB_OUTPUT"
      #     fi

  # request-approval:
  #   needs:
  #     - detect-networking-changes
  #     # - output-network-changes
  #   if: needs.detect-networking-changes.outputs.requires_approval == 'true'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     issues: write
  #   outputs:
  #     deployment_approved: ${{ steps.set_approval.outputs.deployment_approved }}
  #   steps:
  #     - name: Manual Workflow Approval
  #       id: approval
  #       uses: trstringer/manual-approval@v1.9.1
  #       with:
  #         secret: ${{ secrets.GITHUB_TOKEN }}
  #         approvers: Ram1814
  #         minimum-approvals: 1
  #         issue-title: "Approve Networking Changes"
  #         issue-body: "Please approve or deny the deployment of networking changes."

  #     - name: Check Approval Status
  #       id: set_approval
  #       run: |
  #         if [[ "${{ steps.approval.outcome }}" == "success" ]]; then
  #           echo "Manual approval succeeded"
  #           echo "deployment_approved=true" >> "$GITHUB_OUTPUT"
  #         else
  #           echo "Manual approval failed"
  #           echo "deployment_approved=false" >> "$GITHUB_OUTPUT"
  #         fi

  # status-check:
  #   needs: 
  #     - detect-networking-changes
  #     - request-approval
  #   if: always()
  #   runs-on: ubuntu-latest
  #   outputs:
  #     proceed_with_deployment: ${{ steps.decision.outputs.proceed_with_deployment }}
  #   steps:
  #     - name: Determine network check result
  #       id: decision
  #       run: |
  #         requires_approval="${{ needs.detect-networking-changes.outputs.requires_approval }}"
  #         deployment_approved="${{ needs.request-approval.outputs.deployment_approved }}"

  #         echo "requires_approval: $requires_approval"
  #         echo "deployment_approved: $deployment_approved"

  #         if [[ "$requires_approval" == "false" ]]; then
  #           echo "No approval needed, proceeding with deployment."
  #           echo "proceed_with_deployment=true" >> "$GITHUB_OUTPUT"
  #           exit 0
  #         fi

  #         if [[ "$requires_approval" == "true" && "$deployment_approved" == "true" ]]; then
  #           echo "Approval granted, proceeding with deployment."
  #           echo "proceed_with_deployment=true" >> "$GITHUB_OUTPUT"
  #           exit 0
  #         fi

  #         echo "Approval denied or pending! Skipping deployment."
  #         echo "proceed_with_deployment=false" >> "$GITHUB_OUTPUT"
  #         exit 1

  # deploy-service:
  #   needs: status-check
  #   if: always()
  #   uses: ./.github/workflows/service-deploy.yml
  #   with:
  #     environment: ${{ github.ref_name }}
  #     proceed_with_deployment: ${{ needs.status-check.outputs.proceed_with_deployment }}
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
